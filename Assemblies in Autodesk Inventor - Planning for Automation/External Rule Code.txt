
Sub Main()
	'*********************************************************************************
	' DOCUMENT
	'*********************************************************************************
	Dim asmDoc As AssemblyDocument = ThisApplication.ActiveDocument
	Dim asmDef As AssemblyComponentDefinition = asmDoc.ComponentDefinition	

	'*********************************************************************************
	' iProperties
	'*********************************************************************************
	Dim oal As String = ReturnPropertyValue(asmDoc, "OAL")
	Dim gateLocation As String = ReturnPropertyValue(asmDoc, "GATE LOCATION")
	Dim height As String = ReturnPropertyValue(asmDoc, "HEIGHT")

	'*********************************************************************************
	' PUSH iProperties INTO PARAMETERS
	'*********************************************************************************
	If oal <> "" Then Parameter.Param("OAL").Expression = LCase(oal)
	If gateLocation <> "" Then Parameter.Param("GATE_LOCATION").Expression = LCase(gateLocation)
	If height <> "" Then Parameter.Param("HEIGHT").Expression = LCase(height)
		

	'*********************************************************************************
	' CONVERT iProperties INTO FEET-INCH FORMAT
	'*********************************************************************************
	iProperties.Value("Custom", "OAL")  = ConvertDecimaltoFeetInches(Parameter("OAL"))
	iProperties.Value("Custom", "GATE LOCATION")  = ConvertDecimaltoFeetInches(Parameter("GATE_LOCATION"))
	iProperties.Value("Custom", "HEIGHT")  = ConvertDecimaltoFeetInches(Parameter("HEIGHT"))
	
	'*********************************************************************************
	' UPDATE DOCUMENT TO MAKE PARTS IN ASSEMBLY IN CORRECT LOCATION PRIOR TO MEASURING
	'*********************************************************************************		
	InventorVb.DocumentUpdate()

	'*********************************************************************************
	' TAKE MEASUREMENTS FOR DISTANCE BETWEEN PLANES TO ACCURATELY CALCULATE
	' PATTERN QTY
	'*********************************************************************************
	Dim patternLength_IN As Double = Measure.MinimumDistance("PLANE IN", "PLANE GATE IN")
	Dim patternLength_OUT As Double = Measure.MinimumDistance("PLANE GATE OUT", "PLANE OUT OFFSET")
	
	'*********************************************************************************
	' VALIDATE OAL OR RESET TO DEFAULT
	'*********************************************************************************		
	Dim gateName As String = "GATE"
	Dim gateOcc As ComponentOccurrence = Component.InventorComponent(gateName)
	Dim gateDoc As PartDocument = gateOcc.Definition.Document
	Dim gateLength As Double = Parameter(gateName, "LENGTH")
	
	Dim compOutName As String = "COMP OUT"
	Dim compOutOcc As ComponentOccurrence = Component.InventorComponent(compOutName)
	Dim compOutDoc As PartDocument = compOutOcc.Definition.Document
	Dim compOutLength As Double = Parameter(compOutName, "LENGTH")	
	
	Dim minOAL As Double = patternLength_IN + gateLength + compOutLength
	
	If Parameter("OAL") < minOAL Then 
		MessageBox.Show("OAL is below the minimum length to accurately represent the design. Automatically changing to the default minimum length...", "Too Short!", MessageBoxButtons.OK, MessageBoxIcon.Warning)
		Parameter.Param("OAL").Expression = CStr(minOAL)
		iProperties.Value("Custom", "OAL") = ConvertDecimaltoFeetInches(minOAL)
		
		'UPDATE DOCUMENT TO UP TO DATE OAL
		InventorVb.DocumentUpdate()
		
		'REMEASURE PLANES SINCE THEY HAVE CHANGED
		patternLength_IN = Measure.MinimumDistance("PLANE IN", "PLANE GATE IN")
		patternLength_OUT = Measure.MinimumDistance("PLANE GATE OUT", "PLANE OUT OFFSET")
	End If 
		
	'*********************************************************************************
	' PATTERN IN CALCULATIONS
	'*********************************************************************************
	Dim patternOffset_In As Double = Parameter("PAT_IN_OFFSET")
	Dim patternQty_In As Double = Ceiling(patternLength_IN / patternOffset_In)
	Dim patternVis_In As Boolean = False	
	Dim patternExp_In As String = "1"	
	
	If patternLength_IN > 0 Then 
		patternExp_In = CStr(patternQty_In)
		patternVis_In = True 
	End If 
	
	Parameter.Param("PAT_IN_QTY").Expression = patternExp_In
	MakePatternInvisible(asmDoc, "PAT IN", patternVis_In)
	
	'*********************************************************************************
	' PATTERN OUT CALCULATIONS
	'*********************************************************************************	
	Dim patternOffset_Out As Double = Parameter("PAT_OUT_OFFSET")
	Dim patternQty_Out As Double = Ceiling(patternLength_OUT / patternOffset_Out)
	Dim patternVis_Out As Boolean = False
	Dim patternExp_Out As String = "1"

	If patternLength_OUT > 0 Then 
		patternExp_Out = CStr(patternQty_Out)
		patternVis_Out = True
	End If 
	
	Parameter.Param("PAT_OUT_QTY").Expression = patternExp_Out
	MakePatternInvisible(asmDoc, "PAT OUT", patternVis_Out)
	
	'*********************************************************************************
	' UPDATE ASSEMBLY SO THAT THE PATTERNS REFLECT THEIR CURRENT STATE THIS WILL HELP
	' WITH ADDING AND REMOVING PARTICIPANTS LATER IN THE CODE. 
	'*********************************************************************************
	InventorVb.DocumentUpdate()

	'*********************************************************************************
	' ADJUSTING ASSEMBLY EXTRUSION CUTS - ADD OR REMOVE PARTICIPANTS AS NEEDED
	' WHEN PARAMETERS SHRINK OR GROW PATTERNS
	'*********************************************************************************
	AdjustExtrusionParticipants(asmDoc, "EXT GATE", "PAT IN", "COMP IN")
	AdjustExtrusionParticipants(asmDoc, "EXT OUT", "PAT OUT", "COMP GATE")
	
	'*********************************************************************************
	' SET INVISIBLE COMPONENTS TO REFERENCE
	'*********************************************************************************	
	For Each invOcc As ComponentOccurrence In asmDoc.ComponentDefinition.Occurrences
		If invOcc.Definition.Type <> kVirtualComponentDefinitionObject Then
			If invOcc.Visible = False Or invOcc.Transparent = True Then
				invOcc.BOMStructure = BOMStructureEnum.kReferenceBOMStructure
			Else
				invOcc.BOMStructure = BOMStructureEnum.kDefaultBOMStructure
			End If
		End If	
	Next	
	
	iLogicVb.UpdateWhenDone = True
	

End Sub


Sub AdjustExtrusionParticipants(invDoc As AssemblyDocument, extName As String, patName As String, defaultName As String)
	
	'*********************************************************************************
	' THIS SUB ADDS THE LAST PARTICIPANT FROM A PATTERN TO AN ASSEMBLY EXTRUSION
	' ALONG WITH REMOVING PARTICIPANTS THAT ARE NOT THE LAST PARTICIPANT AND ALSO 
	' NOT THE DEFAULT PARTICIPANT. 
	'*********************************************************************************
	InventorVb.DocumentUpdate()
	
	Dim asmDef As AssemblyComponentDefinition = invDoc.ComponentDefinition 
	Dim ext As ExtrudeFeature = Feature.InventorFeature(extName)
	Dim pat As OccurrencePattern = asmDef.OccurrencePatterns.Item(patName)
	Dim extOcc As ComponentOccurrence
	Dim patElement As OccurrencePatternElement 
	Dim patOcc As ComponentOccurrence
	Dim extOcc2 As ComponentOccurrence
	Dim OccExists As Boolean 
	
	If ext IsNot Nothing And pat IsNot Nothing Then 
		For Each extOcc In ext.Participants
			For Each patElement In pat.OccurrencePatternElements
				For Each patOcc In patElement.Occurrences
					If patOcc.Name <> defaultName Then 
						If patOcc.PatternElement.Index < pat.OccurrencePatternElements.Count Then 
							If patOcc Is extOcc Then 
								'MsgBox ("Removing- " & patOcc.Name & " To " & ext.Name , , "Managing Participants" )
								ext.RemoveParticipant(patOcc)
							End If 
						ElseIf patOcc.PatternElement.Index = pat.OccurrencePatternElements.Count Then 
							OccExists = False 
							'SKIP IF IT ALREADY EXISTS IN THE EXTRUSION
							For Each extOcc2 In ext.Participants 
								If extOcc2.Name = patOcc.Name Then 
									OccExists = True 
								End If 
							Next 	
							
							If OccExists = False Then 
								If patOcc IsNot extOcc Then 
									'MsgBox("Adding- " & patOcc.Name & " To " & ext.Name, , "Managing Participants")
									ext.AddParticipant(patOcc)
								End If 
							End If 
						End If 
					End If 
				Next 
			Next
		Next 
	End If 
	
End Sub 

Public Sub MakePatternInvisible(invDoc As Document, patName As String, isVisible As Boolean)
	'*********************************************************************************
	' IN PREVIOUS VERSIONS OF INVENTOR WHEN YOU WOULD MAKE THE PATTERN INVISIBLE 
	' ALL THE OCCURRENCES WOULD STAY VISIBLE. THIS SUB SOLVES THAT PROBLEM. 
	' 
	' IT'S IMPORTANT TO MAKE THE PATTERN AND ALL OF IT'S OCCURRENCES INVISIBLE IF
	' THEY ARE NOT BEING USED. IN THIS EXAMPLE WE WILL BE USING INVISIBLITY TO 
	' CONTROL BOM TYPE LATER ON IN THE MAIN SUB. 
	' WHEN A PATTERN'S COUNT IS LESS THAN ONE THEN THE PATTERN QTY WILL BE SET TO ONE
	' AND THE PATTERN AND ALL OF IT'S OCCURRENCES WILL BE SET TO VISIBLE = FALSE. 
	'*********************************************************************************

	Dim asmDef As AssemblyComponentDefinition = invDoc.ComponentDefinition 
	Dim pat As OccurrencePattern = asmDef.OccurrencePatterns.Item(patName)
	Dim patElement As OccurrencePatternElement 
	Dim patOcc As ComponentOccurrence
	
	If pat IsNot Nothing Then 
		pat.Visible = isVisible
		
		For Each patElement In pat.OccurrencePatternElements
			For Each patOcc In patElement.Occurrences
				patOcc.Visible = isVisible
			Next 
		Next 
	End If 
	
End Sub 


Function ReturnPropertyValue(invDoc As Document, invPropName As String) As String
	'*********************************************************************************
	' IN PREVIOUS VERSIONS OF INVENTOR THERE WERE ISSUES WHERE IF THE IPROPERTY DIDN'T 
	' EXIST AN ERROR WOULD RETURN. THIS FUNCTION SOLVES THAT PROBLEM. 
	' THIS FUNCTION WILL GO THROUGH ALL THE POSSIBLE IPROPERTY LOCATIONS AND TRY TO FIND
	' THEM ALL. IF IT IS NOT FOUND AN EMPTY STRING WILL BE RETURNED. 
	'*********************************************************************************
    If invDoc Is Nothing Then Exit Function

    Dim invSumProperties As PropertySet = invDoc.PropertySets.Item("Inventor Summary Information")
    Dim invDTProperties As PropertySet = invDoc.PropertySets.Item("Design Tracking Properties")
    Dim invDSIProperties As PropertySet = invDoc.PropertySets.Item("Inventor Document Summary Information")
    Dim invCustomPropertySet As PropertySet = invDoc.PropertySets.Item("Inventor User Defined Properties")
    Dim invProp As Inventor.Property
    
    For Each invProp In invSumProperties
        If invProp.Name = invPropName Then
            Return invProp.Value
        End If
    Next
    For Each invProp In invDTProperties
        If invProp.Name = invPropName Then
            Return invProp.Value
        End If
    Next
    For Each invProp In invDSIProperties
        If invProp.Name = invPropName Then
            Return invProp.Value
        End If
    Next
    For Each invProp In invCustomPropertySet
        If invProp.Name = invPropName Then
            Return invProp.Value
        End If
    Next
	
	Return ""
	
End Function

Function ConvertDecimaltoFeetInches(value As Double) As String
	'*********************************************************************************
	' THIS FUNCTION FORMATS THE INPUT VALUE INTO FEED AND INCHES. EVALUATING IT IF 
	' THE VALUE IS GREATER THAN 0. 
	'*********************************************************************************	
	
	Dim feet As Integer 
	Dim inches As Double
	Dim roundedInches As Double
	Dim result As String

	If value > 0 Then 
	    feet = value \ 12
	    inches = value Mod 12
	
	    roundedInches = Math.Round(inches * 8) / 8
	
	    If roundedInches >= 12 Then
	        feet += 1
	        roundedInches -= 12
	    End If
	
	    result = feet & "'-" & roundedInches & """"
		
	    Return result
	End If 
	
	
	
End Function



